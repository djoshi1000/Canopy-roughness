from osgeo import gdal
import sys,os
import numpy as np
import rasterio
from matplotlib import pyplot
import cv2
import numpy as np
from skimage.morphology import rectangle
import skimage.filters as filters
from numpy import inf
import pandas as pd
#img = rasterio.open(r"D:\Project_data\Drive\Hmax\Hmax\000645_nw.img")
from rasterio.plot import show
# Save image in set directory
# Read RGB image
ds = rasterio.open(r"D:\Project_data\Drive\Hmax\Split\025705_nw9.IMG")
img = gdal.Open(r"D:\Project_data\Drive\Hmax\Split\025705_nw9.IMG")
outpath=r"D:\Project_data\Drive\Hmax"
arr = (img.ReadAsArray())
# arr= np.array([[2, 2,3, 4,-inf,1],[4, 5, 9, 7, 0, 1],[1, 5, 1, 4, 0,1],
#                [1, 2, 1, 4, 0, 1],[1, 2, 1, 4, 0, 1],[0, 0, 0, 5, 0, 0]])
k= arr.shape
c=4
Deep_gaps = []
moving_averages = []
for i in range(0,len(arr)):
    for j in range(0,len(arr[0])):
        window= arr[i:i+c, j:j+c]
        mat= (window.ravel(order='F'))
        ct= len(mat)
        if (ct == (c*c)):
            mat[mat == -inf] = 0
            mat=np.ndarray.tolist(mat)
        elif (ct != (c*c)):
            mat[mat == -inf] = 0
            mat=np.ndarray.tolist(np.pad(mat, (0,(c*c)-ct), 'mean'))
        summ= (np.std(mat))
        moving_averages.append(summ)
        mat2= np.ndarray.tolist(window.ravel(order='F'))
        if np.sum(np.isnan(mat2)):
            mat2=np.ndarray.tolist(np.where(np.isnan(mat2), 0, mat2))
            #print("NAN found")
            gaps= mat2.count(0)/100
        else:
            gaps= mat2.count(0)/100
            Deep_gaps.append(gaps)
        
# # np_matrix= np.arange(moving_averages.reshape(782,782))
np_matrix= np.array(moving_averages)
Gaps= np.array(Deep_gaps)
n=(Gaps.reshape(k).astype(np.float32))
l=(np_matrix.reshape(k).astype(np.float32))
l[l == inf] = 0
kwargs = ds.meta
kwargs.update(
#     dtype=rasterio.uint8,
    count=1,
    compress='lzw')
with rasterio.open(os.path.join(outpath, '025705_nw9.tif'), 'w', **kwargs) as dst:
    dst.write_band(1,l)
with rasterio.open(os.path.join(outpath, '025705_nw9_Gaps.tif'), 'w', **kwargs) as dst:
    dst.write_band(1,n)
